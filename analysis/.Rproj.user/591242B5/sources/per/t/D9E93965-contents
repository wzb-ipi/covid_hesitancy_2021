---
output: html_document
---

```{r}
# remotes::install_github("DeclareDesign/DeclareDesign")
# remotes::install_github("macartan/CausalQueries")
library(CausalQueries)
library(tidyverse)
library(snow)
library(DeclareDesign)
library(knitr)
library(rstan)
do_diagnosis <- TRUE
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
```

```{r}

causal_model <- make_model("X -> M -> Y; M <-> Y; X <->Y") %>%
  set_priors(node = "X", alpha = c(100, 100)) %>%
  set_restrictions(labels = 
                     list(M = "10",  Y = "10"))

#Q <-  CausalQueries::query_distribution(
#  causal_model,
#  query = "Y[X=1] - Y[X=0]", using = "priors")

```


```{r}

n <- 7

estimation_handler = function(data) 
		causal_model %>% update_model(data = data) %>%
    query_model(query = "Y[X=1] - Y[X=0]", 
                using = "posteriors", 
                given = c(TRUE, "X==1 & Y==1")) %>%
  rename(estimate = mean) %>%
  select(estimate, sd) %>% 
  mutate(Inquiry = c("ATE", "POC"))

strategy <- c("00" = 4, "01" = 0, "10" = 0, "11" = 4)
strategy_names <- names(strategy)

# We have to make strat_n target flexible to take  account of the possibility of no data in some strata
strata_n <- function(strategy, strata) 
  sapply(1:4, function(i) min(strategy[i], sum(strata == strategy_names[i])))[strategy_names %in% strata]
# strata_n(strategy, c("01", "00","10", "00"))

data_handler = function(data, n = n) 
    CausalQueries::make_data(causal_model, parameters = data$parameters, n = n)

design <-

  declare_model(data.frame(parameters = CausalQueries::get_parameters(causal_model, param_type = "prior_draw"))) +
  declare_inquiry(ATE = CausalQueries::query_model(causal_model, "Y[X=1] - Y[X=0]", 
  parameters = parameters, using = "parameters")$mean) +   declare_inquiry(POC = CausalQueries::query_model(causal_model, "Y[X=1] - Y[X=0]", given = "X==1 & Y==1",  
  parameters = parameters, using = "parameters")$mean) +
  declare_measurement(handler = data_handler, n = n) +
  declare_measurement(
    strata = paste0(X,Y),
    M_observed = strata_rs(strata = paste0(X,Y), strata_n = strata_n(strategy, strata)),
    M = ifelse(M_observed==1, M, NA)) +
  declare_estimator(handler = label_estimator(estimation_handler), inquiry = c("ATE", "POC")) 



mixed_diagnosands <- 
  declare_diagnosands(mean_estimate = mean(estimate),
                      sd_estimate = sd(estimate),
                      bias = mean(estimate - estimand),
                      posterior_variance = mean(sd^2))


```

Parallelization

```{r, echo = FALSE}

n_clusters <- 50
n_sims_per_run <- 80

sims <- rep(n_sims_per_run, n_clusters)
cl <- makeCluster(n_clusters, type="SOCK")

designs <- design %>%
  redesign(n = c(50, 100, 150), 
           strategy = list(c(0,0,0,0), c(4,0,0,4), c(0,0,0,8)))

simit <- function(sims) 
    DeclareDesign::simulate_design(designs, sims = sims)


clusterEvalQ(cl = cl,expr = {
  library(dplyr)
  library(randomizr)
  library(rstan)
  library(CausalQueries)})

clusterExport(cl, list(
  "designs", 
  "n", 
  "causal_model", 
  "estimation_handler", 
  "strategy" , 
  "strategy_names",  
  "strata_n")) 

simulations_list <- clusterApply(cl, sims, simit)

stopCluster(cl)

simulations <- simulations_list %>% bind_rows 

write_rds(simulations, file = "mixed.rds")
```

```{r forestdiagnosis, echo = FALSE}

simulations <- read_rds(file = "mixed.rds") 

diagnosis <-  simulations %>%
    diagnose_design(diagnosands = mixed_diagnosands)

diagnosis$diagnosands_df %>%
  mutate(strategy = factor(strategy, c("c(0, 0, 0, 0)", "c(4, 0, 0, 4)", "c(0, 0, 0, 8)"), c("No case studies", "On diagonal cases", "Positive cases only"))) %>%
  ggplot(aes(n, posterior_variance, color = strategy)) + geom_line()  + ylab("Expected posterior variance") + ylim(0, NA)  +
  theme(legend.position = "right") + facet_grid(inquiry~., scales = "free_y")


diagnosis$simulations_df %>%
  mutate(strategy = factor(strategy, c("c(0, 0, 0, 0)", "c(4, 0, 0, 4)", "c(0, 0, 0, 8)"), c("No cases", "On diagonal cases", "Positive cases only"))) %>%
  ggplot(aes(sd^2)) + geom_histogram()  + facet_grid(n ~ strategy)


diagnosis$simulations_df %>%
  mutate(strategy = factor(strategy, c("c(0, 0, 0, 0)", "c(4, 0, 0, 4)", "c(0, 0, 0, 8)"), c("No cases", "On diagonal cases", "Positive cases only"))) %>%
  ggplot(aes(estimate)) + geom_histogram()  + facet_grid(n ~ strategy)

diagnosis$simulations_df %>%
  mutate(strategy = factor(strategy, c("c(0, 0, 0, 0)", "c(4, 0, 0, 4)", "c(0, 0, 0, 8)"), c("No cases", "On diagonal cases", "Positive cases only"))) %>%
  ggplot(aes(estimate, estimand)) + geom_point()  + facet_grid(n ~ strategy)
```

