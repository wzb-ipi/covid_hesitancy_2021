---
title: 'Data prep'
date: "March 2021"
output:
  html_document:
    number_sections: no
    toc_depth: 2
    self_contained: yes
  pdf_document:
    toc: yes
  word_document:
    toc: yes
    toc_depth: '2'
keywords: 
theme: null
abstract: 
bibliography: references.bib  
editor_options:
  chunk_output_type: console
---

# Prepare Data

## Import data

Import data,  get labels for treatment, rename variables, generate differences.

Raw data has treatments recorded in a single vector with 12 values. These are now transformed ino the underlying factors. 

```{r}

# get labels
Z_labels <- read.csv("input/wave_1/Z_labels.csv")
kable(Z_labels, booktabs = TRUE)

df <- read.csv("input/wave_1/wave_1.csv") %>%
  rowid_to_column("ID")  %>%
  mutate(
    Z_1_1 = as.numeric(paste(c_0031)),
    outcome_t1 = v_74 / 10,
    Z_1_2 = as.numeric(paste(c_0032)),
    outcome_t2 = v_77 / 10
  ) %>%
  left_join(Z_labels) %>%
  left_join(
    Z_labels %>%
      rename(
        Z_1_2 = Z_1_1,
        negative_t2 = negative_t1,
        transaction_t2 = transaction_t1,
        financialA_t2 = financialA_t1,
        financialB_t2 = financialB_t1
      )
  ) %>%
#    mutate(distance_km = NA) %>%

  # rename covariates
  rename_at(
    vars(var_list$var_name[var_list$transformed==0 & var_list$new_name!="distance_km"]), 
    ~ var_list$new_name[var_list$transformed==0 & var_list$new_name!="distance_km"]) %>%
  
  # transformations
  mutate(
    outcome_diff     = outcome_t2 - outcome_t1,
    negative_diff    = negative_t2 - negative_t1,
    financialA_diff  = financialA_t2 - financialA_t1,
    financialB_diff  = financialB_t2 - financialB_t1,
    transaction_diff = transaction_t2 - transaction_t1,
    postcode = as.numeric(postcode),
    days = (date - min(date) +1)/21, # Normalized to 0-1
    status = ifelse(
      is.na(vaccination.intent),
      "Vaccinated",
      paste(vaccination.intent)
    ),
    status = dplyr::recode(
      status,
      "1" = "Acceptant",
      "2" = "Refusing",
      "3" = "Undecided"
    ),
     casmin = case_when(
                    education== 1 & v_142== 7 ~ 0,
                    education== 2 & v_142== 7 ~ 1,
                    (education==2) & (v_142==1 | v_142==2 | v_142==3) ~ 2,
                    (education==1) & (v_142==1 | v_142==2 | v_142==3)  ~ 2,
                    education== 3 & v_142== 7 ~ 3,
                    (education==3) & (v_142==1 | v_142==2 | v_142==3) ~ 4,
                    (education==4 | education==5) & (v_142==7)~ 5,
                    (education==4 | education==5) & (v_142==1 | v_142==2 | v_142==3) ~ 6,
                    (education==4)  ~ 7,
                    (education==5)  ~ 8,
                    TRUE ~ NA_real_ # This is for all other values not covered by the above.
    ),
    eduyears = case_when(
                    casmin == 0 ~ 8,
                    casmin == 1 ~ 9,
                    casmin == 2 ~ 12,
                    casmin == 3 ~ 10,
                    casmin == 4 ~ 13,
                    casmin == 5 ~ 13,
                    casmin == 6 ~ 15,
                    casmin == 7 ~ 16,
                    casmin == 8 ~ 18,
                    TRUE ~ NA_real_ # This is for all other values 
),
    eduyears = (eduyears - min(eduyears, na.rm = TRUE))/max(eduyears, na.rm = TRUE),
    household.larger = (household.size > 2)*1,
    covid.media = 1-(covid.media-1)/4, 
    vaccinated = 1*(vaccination == 1),
    network.vaccinated = (network.vaccinated-1)/4,
    covid.infection = 1*(covid.infection == 1),
    covid.infection.proximity = (covid.infection.proximity-1)/2,
    covid.information = 1- (covid.information-1)/4,
    covid.rules.mask = 1- (covid.rules.mask-1)/5,
    covid.rules.distance = 1- (covid.rules.distance-1)/5,
    support.distance = 1-(support.distance-1)/4, 
    covid.income = 1-(covid.income-1)/4, 
    voted = 1*(voter.turnout ==1),
    age2 = (age - min(age))/(max(age) - min(age)),
    male = 1*(gender == 2), 
    political.interest = 1 - (political.interest-1)/3,
    left.right = (left.right-1)/10,
    CDU.CSU = 1*(party.id <= 2),
    CDU.CSU = ifelse(is.na(CDU.CSU), 0, CDU.CSU),
    SPD = 1*(party.id ==3),
    SPD = ifelse(is.na(SPD), 0, SPD),
    AfD = 1*(party.id ==4),
    AfD = ifelse(is.na(AfD), 0, AfD),
    Greens = 1*(party.id ==5),
    Greens = ifelse(is.na(Greens), 0, Greens),
    FDP = 1*(party.id ==6),
    FDP = ifelse(is.na(FDP), 0, FDP),
    Left = 1*(party.id ==7),
    Left = ifelse(is.na(Left), 0, Left),
    No.party = 1*(party.id == 9),
    No.party = ifelse(is.na(No.party), 0, No.party),
    solidarity = solidarity/10,
    international.solidarity = international.solidarity/10,
    EU.support = EU.support/10,
    migration.support = migration.support/10,
    Employed = 1*(Employment.Status==1),
    citizenship = (citizenship==3)*1,
    Country.of.birth  = 1*(Country.of.birth==2),
    risk = risk/10,
    trust = trust/10,
    trust.government = trust.government/4,
    trust.experts = trust.experts/4,
    trust.country = trust.country/4,
    trust.media =  trust.media/4,
    trust.healthcare = trust.healthcare/4,
    acceptant = 1*(vaccination.intent == 1),
    acceptant = ifelse(is.na(vaccination.intent), 1, acceptant),
    refusing = vaccination.intent == 2,
    refusing = ifelse(is.na(vaccination.intent), 0, refusing),
    undecided = 1*(vaccination.intent == 3),
    undecided = ifelse(is.na(vaccination.intent), 0, undecided),
    health = (health - 1)/6,
    health2 = 1*(health2 == 1),
    covid.surveys = ifelse(covid.surveys == 99, NA, covid.surveys),
    east.west =ifelse(federal.state== "4" |#"Brandenburg"
                                  federal.state== "8" |#"Mecklenburg-Vorpommern"
                                  federal.state== "13"|#"Sachsen"
                                  federal.state== "14"|#Sachsen-Anhalt
                                  federal.state== "16" #"ThÃ¼ringen"
                                  , 1, 0)
  )

```

## Distance 

We calculate a measure of distance to vaccination centers. 

```{r, results = "asis", message = FALSE}
# zip code: five digits
#Source: https://www.suche-postleitzahl.org/downloads
ogrInfo(dsn="input/postal code/plz-5stellig.shp/plz-5stellig.shp")
postal_shape <- readOGR(dsn="input/postal code/plz-5stellig.shp/plz-5stellig.shp")

#plot(postal_shape)
typeof(postal_shape)
proj4string(postal_shape)

# get centroid
postal_shape_centers <- SpatialPointsDataFrame(gCentroid(postal_shape, byid=TRUE), 
                                      postal_shape@data, match.ID=FALSE)
# test, looks good
plot(postal_shape_centers)
# transform to get meters
postal_shape_centers1<-spTransform(postal_shape_centers,CRS("+proj=utm +zone=32 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs"))
proj4string(postal_shape_centers1)
plot(postal_shape_centers1)
#########################################
# load vaccination centers with geo code 
#########################################
# Source:
centers <- geojsonsf::geojson_sf("input/vaccination_centers/export.geojson")
# check if all covid 19 vaccinations 
plyr::count(centers$vaccination)
# could be that vaccination center is multiple times in the data (see wiki page)
# for us not important, only minimal distance important
# extract the coordinnates
poly<-centers %>% 
  dplyr::select(geometry) 
class(poly)

# calculate center again because some object are polgyon and we want points 
centers  <- st_centroid(poly)
centers_points <- as_Spatial(centers)
# plot(centers_points)
# convert to same format 
# transform to get meters
proj4string(centers_points)
pts <- spTransform(centers_points,CRS("+proj=utm +zone=32 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs"))
proj4string(pts)

#########################################
# merge
#########################################
# load shp as dataframe (to merge onto)
postal_shape_out <- st_read('input/postal code/plz-5stellig.shp/plz-5stellig.shp')

# gDistance by default returns the cartesian minimum distance between the two geometries in the units of the current projection. 
postal_shape_out$distance_vaccination<-sapply(1:length(postal_shape_centers1),function(x)gDistance(pts,postal_shape_centers1[x,]))
# check distribution, looks reasonable
# hist(postal_shape_out$distance_vaccination)

# rename to fit survey file
distance<-as.data.frame(postal_shape_out)%>% 
  dplyr::rename(postcode = plz) %>% 
  dplyr::mutate(postcode = as.numeric(postcode)) %>% 
  dplyr::rename(city = note) %>% 
  dplyr::mutate(distance_km=distance_vaccination/1000) %>% 
  dplyr::select (-c(geometry,distance_vaccination)) 

typeof(distance$postcode)
# check for duplicates
n_occur <- data.frame(table(distance$postcode))

# merge
df <- left_join(df, distance, by = "postcode")
hist(df$distance_km)

df <- df %>% dplyr::mutate(distance_km_raw = distance_km, 
                           distance_km = (distance_km - min(distance_km, na.rm = TRUE))/
                             (max(distance_km, na.rm = TRUE) - min(distance_km, na.rm = TRUE)))

```

```{r, results = "asis"}
#print(dfSummary(df[,covariate_names], graph.magnif = 0.75), method = 'render')

```



## Stacked dataframe

The wide dataframe is used for first differences analysis. In addition we make use of a stacked data frame for fixed effects analysis. 

```{r}

# This should also be possible with pivot_longer
df_stacked <- 
  bind_rows(mutate(df, t = 1), mutate(df, t = 2)) %>%
  mutate(
    outcome     = ifelse(t == 1, outcome_t1, outcome_t2),
    negative    = ifelse(t == 1, negative_t1, negative_t2),
    financialA  = ifelse(t == 1, financialA_t1, financialA_t2),
    financialB  = ifelse(t == 1, financialB_t1, financialB_t2),
    transaction = ifelse(t == 1, transaction_t1, transaction_t2),
    )

```


## Summary statistics

The next blocks calculate key summary statistics.

```{r}

# covariate_names[!(covariate_names %in% names(df))]

small_df <- 
  df %>% dplyr::select(all_of(covariate_names)) %>% 
  # select_if(is.numeric) %>% 
  drop_na()

```


```{r summary_stats, results="asis", message=FALSE, echo=TRUE}
# Make a data.frame containing summary statistics of interest

summ_stats <-
  small_df %>% 
  fBasics::basicStats() %>%
  t() %>%
  as.data.frame() %>%
  dplyr::select("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum") %>% 
  rename('Lower quartile'= '1. Quartile', 'Upper quartile' ='3. Quartile') 

# Add in labels
summ_stats <- summ_stats %>% 
  mutate(Variable = factor(rownames(summ_stats), var_list$new_name, var_list$label)) %>% relocate(Variable)

```

```{r summary_stats_table, results="asis", message=FALSE, echo=FALSE}
# Pretty-printing in HTML
summ_stats_table <- kable(summ_stats, "html", digits = 2, booktabs = TRUE, row.names = FALSE)
kable_styling(summ_stats_table,
              bootstrap_options=c("striped", "hover", "condensed", "responsive"),
              full_width=FALSE)


tab_1 <- kable(summ_stats, format = "latex", digits = 2, caption = "Summary statistics", booktabs = T, linesep = "", label = "SummStats", row.names = FALSE) %>%
  kable_styling(latex_options="scale_down")

fileConn<-file(tab_1_path)
writeLines(tab_1, fileConn)
close(fileConn)

```


Pairwise correlations.

```{r cor plot, echo=FALSE, fig.width=10, fig.height=10, warning=FALSE}

pairwise_pvalues <- psych::corr.test(small_df, small_df)$p

  small_df  %>%  
  cor %>%
  corrplot::corrplot(type="upper",
         tl.col="black",
         order="original",
         tl.cex=1,
         addgrid.col = "black",
         p.mat=pairwise_pvalues,
         sig.level=0.05,
         number.font=10,
         insig="blank")

pdf(corr_matrix_plot_path, height = 10, width = 10)

  small_df %>%     
  cor %>%
  corrplot::corrplot(type="upper",
         tl.col="black",
         order="original",
         tl.cex=1,
         addgrid.col = "black",
         p.mat=pairwise_pvalues,
         sig.level=0.05,
         number.font=10,
         insig="blank")
dev.off()

```

Around 65 \% in the sample would get vaccinated, 17 \% would not, and 18 \% remain undecided. 

```{r}
fig_1 <- df %>% ggplot(aes(status)) + 
  geom_hline(yintercept=0.7, linetype="longdash", lwd=0.35, size=0.75, colour = "#B55555") +
  geom_bar(aes(y = (..count..)/sum(..count..)),width = 0.6,alpha = 0.5) + 
  scale_y_continuous(labels=scales::percent) +
  theme_bw(base_size=16)+
  theme(axis.title.y = element_blank())+
  ylab("Percent (%)")+
  coord_flip()
fig_1

pdf(fig_1_path, height = 3, width = 6)
fig_1
dev.off()
```

Concerns of the hesitent and undecided

```{r}
fig_2 <- 
  df %>% dplyr::select(starts_with("fear.")) %>%
  mutate_if(is.character, as.numeric) %>% 
  melt(variable.name = "Group") %>%  
  mutate(Group = 
           factor(Group,
                  c("fear.longterm", "fear.admission", "fear.effectiveness", "fear.side.effects", "fear.no.danger"),
                  c("Longterm Consequences", "Doubt approval process", "Doubt effectiveness", "Side Effects", "Covid not dangerous")))%>% 
  group_by(Group) %>%
  summarize(mean = 100*mean(value, na.rm = TRUE))  %>%
  ggplot() +
  geom_bar(aes(Group, mean), stat = "identity", width = 0.6,alpha = 0.5)+
  theme_bw(base_size=18)+
  ylab("Percent (%)")+
  theme(axis.title.y = element_blank())+
  coord_flip()
 fig_2
 
pdf(fig_2_path, height = 4, width = 8)
fig_2
dev.off()
 
```

## Correlates of Hesitancy

```{r, fig.height  = 10, fig.width = 8}
family_order <- var_list %>% group_by(family) %>% slice(1) %>% arrange(Family_order) %>% pull(family)

correlates <- 
list("acceptant", "refusing", "undecided") %>% 
lapply(function(y)
  lapply(setdiff(covariate_names, tolower(statuses)), function(x)
lm_robust(as.formula(paste(y, "~", x)), data = df) %>% tidy %>% dplyr::mutate(y=y, x=x)) %>% bind_rows) %>% bind_rows %>% dplyr::filter(term!="(Intercept)" & !(x %in% c("acceptant", "refusing", "undecided"))) %>%
  dplyr::mutate(x = factor(x, rev(var_list$new_name), rev(var_list$label))) %>%
  left_join(var_list %>% dplyr::rename(term = new_name) %>% dplyr::select(term, family)) %>%
  dplyr::mutate(family = factor(family, family_order))


fig_cov <- 
  correlates %>% 
dplyr::mutate(y = factor(y, c("acceptant", "undecided", "refusing" ))) %>%
dplyr::filter(x!="federal.state") %>%
ggplot(aes(estimate    , x)) + geom_point() + facet_grid(family ~ y, scales = "free_y") + ylab("") + xlab("How much more or less likely to be [acceptant / undecided / refusing] at baseline")  + 
  geom_vline(xintercept = 0, color = "red") +
  theme_bw() +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = .25)

fig_cov

pdf(correlates_plot_path, height =9, width = 8)
fig_cov
dev.off()

```
